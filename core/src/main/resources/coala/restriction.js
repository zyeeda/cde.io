// Generated by CoffeeScript 1.3.3
(function() {
  var fillRestrict, junctionRestrict, restrictions;

  restrictions = [
    {
      name: 'name',
      value: 'admin',
      operator: 'eq'
    }, {
      name: 'description',
      value: 'test',
      operator: 'ne'
    }, {
      name: 'description',
      value: 'test',
      operator: 'gt'
    }, {
      name: 'description',
      value: 'test',
      operator: 'lt'
    }, {
      name: 'description',
      value: 'test',
      operator: 'gt'
    }, {
      name: 'description',
      value: 'test',
      operator: 'le'
    }, {
      name: 'description',
      value: 'admin',
      operator: 'like'
    }, {
      name: 'description',
      value: 'between',
      operator: 'ilike'
    }, {
      name: 'description',
      value: 'value1',
      other: 'value2',
      operator: 'between'
    }, {
      name: 'name',
      operator: 'isNull'
    }, {
      name: 'name',
      operator: 'isNotNull'
    }, {
      name: 'name',
      operator: 'in',
      value: ['value1', 'value2']
    }, {
      name: 'name',
      operator: 'or',
      value: [
        {
          name: 'name',
          value: 'admin',
          operator: 'like'
        }, {
          name: 'description',
          value: 'between',
          operator: 'ilike'
        }
      ]
    }, {
      name: 'name',
      operator: 'and',
      value: [
        {
          name: 'name',
          value: 'admin',
          operator: 'like'
        }, {
          name: 'description',
          value: 'between',
          operator: 'ilike'
        }
      ]
    }
  ];

  junctionRestrict = function(value, type) {
    var junc, otherVal, _criteria, _i, _len, _val;
    if (value instanceof Array) {
      if ('con' === type) {
        junc = Restrictions.conjunction();
      } else {
        junc = Restrictions.disjunction();
      }
      for (_i = 0, _len = value.length; _i < _len; _i++) {
        _val = value[_i];
        if (_val.other) {
          if ('like' === _val.operator || 'ilike' === _val.operator) {
            otherVal = MatchMode[restrict.other.toLocaleUpperCase()];
          }
        } else {
          _criteria = Restrictions[_val.operator].call(Restrictions, _val.name, _val.value);
        }
        junc.add(_criteria);
      }
      return junc;
    }
  };

  fillRestrict = function(criteria, restrictions) {
    var otherVal, restrict, _i, _len;
    for (_i = 0, _len = restrictions.length; _i < _len; _i++) {
      restrict = restrictions[_i];
      if (!restrict.operator) {
        continue;
      }
      if ('and' === restrict.operator) {
        criteria = criteria.add(junctionRestrict(restrict.value, 'con'));
      } else if ('or' === restrict.operator) {
        criteria = criteria.add(junctionRestrict(restrict.value, 'dis'));
      } else {
        if (restrict.value && restrict.other) {
          if ('like' === restrict.operator || 'ilike' === restrict.operator) {
            otherVal = MatchMode[restrict.other.toLocaleUpperCase()];
          } else {
            otherVal = restrict.other;
          }
          criteria = criteria.add(Restrictions[restrict.operator].call(Restrictions, restrict.name, restrict.value, otherVal));
        } else if (restrict.value) {
          criteria = criteria.add(Restrictions[restrict.operator].call(Restrictions, restrict.name, restrict.value));
        } else {
          criteria = criteria.add(Restrictions[restrict.operator].call(Restrictions, restrict.name));
        }
      }
    }
    return criteria;
  };

}).call(this);
