// Generated by CoffeeScript 1.3.3
(function() {
  var AnnotationUtils, ArrayUtils, Boolean, Date, Default, Double, FieldUtils, Float, Integer, Locale, mark, objects, _ref, _ref1;

  mark = require('coala/mark').mark;

  objects = require('coala/util').objects;

  _ref = java.util, Date = _ref.Date, Locale = _ref.Locale;

  _ref1 = java.lang, Integer = _ref1.Integer, Boolean = _ref1.Boolean, Double = _ref1.Double, Float = _ref1.Float;

  Default = javax.validation.groups.Default;

  FieldUtils = org.apache.commons.lang.reflect.FieldUtils;

  ArrayUtils = org.apache.commons.lang.ArrayUtils;

  AnnotationUtils = org.springframework.core.annotation.AnnotationUtils;

  exports.createValidator = function() {
    return {
      validate: mark('beans', 'validationFactory').on(function(validationFactory, entity, group) {
        var constraintViolations, consts, it, msg, prop;
        constraintViolations = group ? validationFactory.validator.validate(entity, Default, group) : validationFactory.validator.validate(entity, Default);
        consts = [];
        it = constraintViolations.iterator();
        while (it.hasNext()) {
          msg = {};
          prop = it.next();
          msg.property = prop.propertyPath.toString();
          msg.message = prop.message.toString();
          consts.push(msg);
        }
        if (consts.length > 0) {
          return {
            errors: consts
          };
        } else {
          return {};
        }
      }),
      buildValidateRules: mark('beans', 'messageSource').on(function(messageSource, fields, entityClass, group) {
        var a, annos, annos2, f, field, groups, m, map, message, messageExp, messageKey, messages, name, newAnnos, rules, upperCaseName, _i, _j, _len, _len1;
        rules = {};
        messages = {};
        if (!fields) {
          return rules;
        }
        for (_i = 0, _len = fields.length; _i < _len; _i++) {
          f = fields[_i];
          name = f;
          if (f instanceof Object) {
            name = f.name;
            if (f.rules) {
              rules[name] = objects.extend({}, f.rules);
            }
            if (f.messages) {
              messages[name] = objects.extend({}, f.messages);
            }
          }
          if (!rules[name]) {
            rules[name] = {};
          }
          if (!messages[name]) {
            messages[name] = {};
          }
          annos = [];
          field = FieldUtils.getField(entityClass, name, true);
          if (field.type === Date) {
            rules[name].date = true;
            messages[name].date = messageSource.getMessage('com.zyeeda.framework.validator.constraints.Date.message', null, Locale["default"]);
          } else if (field.type === Integer || 'int'.equals(field.type)) {
            rules[name].digits = true;
            messages[name].digits = messageSource.getMessage('com.zyeeda.framework.validator.constraints.Digits.message', null, Locale["default"]);
          } else if (field.type === Double || 'double'.equals(field.type || field.type === Float || 'float'.equals(field.type))) {
            rules[name].number = true;
            messages[name].number = messageSource.getMessage('com.zyeeda.framework.validator.constraints.Number.message', null, Locale["default"]);
          }
          annos = field.annotations;
          upperCaseName = 'get' + name.substring(0, 1).toUpperCase() + name.substring(1, name.length);
          m = entityClass.getMethod(upperCaseName);
          annos2 = m.annotations;
          newAnnos = annos.concat(annos2);
          for (_j = 0, _len1 = newAnnos.length; _j < _len1; _j++) {
            a = newAnnos[_j];
            map = AnnotationUtils.getAnnotationAttributes(a);
            groups = map.get('groups');
            if (!groups) {
              continue;
            }
            messageExp = map.get('message');
            messageKey = messageExp.substring(1, messageExp.length - 1);
            message = messageSource.getMessage(messageKey, null, Locale["default"]);
            if (groups.length === 0 || ArrayUtils.contains(groups, group)) {
              if (a instanceof javax.validation.constraints.NotNull || a instanceof org.hibernate.validator.constraints.NotBlank) {
                rules[name].required = true;
                messages[name].required = message;
              } else if (a instanceof java.validator.constraints.Digits) {
                rules[name].digits = true;
                messages[name].digits = message;
              } else if (a instanceof org.hibernate.validator.constraints.Email) {
                rules[name].email = true;
                messages[name].email = message;
              } else if (a instanceof org.hibernate.validator.constraints.URL) {
                rules[name].url = true;
                messages[name].url = message;
              } else if (a instanceof org.hibernate.validator.constraints.CreditCardNumber) {
                rules[name].creditcard = true;
                messages[name].creditcard = message;
              } else if (a instanceof org.hibernate.validator.constraints.Range) {
                rules[name].range = [map.get('min'), map.get('max')];
                message = message.replace('{min}', map.get('min'));
                message = message.replace('{max}', map.get('max'));
                messages[name].range = message;
              } else if (a instanceof org.hibernate.validator.constraints.Length) {
                rules[name].rangelength = [map.get('min'), map.get('max')];
                message = message.replace('{min}', map.get('min'));
                message = message.replace('{max}', map.get('max'));
                messages[name].rangelength = message;
              } else if (a instanceof javax.validation.constraints.DecimalMax || a instanceof javax.validation.constraints.constraints.Max) {
                rules[name].max = map.get('value');
                message = message.replace('{value}', map.get('value'));
                messages[name].max = message;
              } else if (a instanceof javax.validation.constraints.DecimalMin || a instanceof javax.validation.constraints.Min) {
                rules[name].min = map.get('value');
                message = message.replace('{value}', map.get('value'));
                messages[name].min = message;
              }
            }
          }
        }
        return {
          rules: rules,
          messages: messages
        };
      })
    };
  };

}).call(this);
