// Generated by CoffeeScript 1.3.3
(function() {
  var Default, Remove, Update, ValidatorFactory, createManager, mark, _ref;

  mark = require('coala/mark').mark;

  createManager = require('coala/manager').createManager;

  ValidatorFactory = javax.validation.ValidatorFactory;

  Default = javax.validation.groups.Default;

  _ref = com.zyeeda.framework.validator.groups, Update = _ref.Update, Remove = _ref.Remove;

  exports.createValidator = function() {
    var validator, _message;
    _message = function(constraintViolations) {
      var consVio, it, msg, msgs, v;
      it = constraintViolations.iterator();
      msgs = [];
      while (it.hasNext()) {
        consVio = it.next();
        msg = {};
        if (v = consVio.propertyPath) {
          msg.property = v.toString();
        }
        if (v = consVio.message) {
          msg.message = v.toString();
        }
        if (v = consVio.invalidValue) {
          msg.value = v.toString();
        } else {
          msg.value = null;
        }
        msgs.push(msg);
      }
      if (msgs.length > 0) {
        return {
          errors: msgs
        };
      } else {
        return {};
      }
    };
    validator = {
      validateCreate: mark('beans', ValidatorFactory).on(function(validationFactory, entity) {
        var constraintViolations;
        constraintViolations = validationFactory.validator.validate(entity, Default);
        return _message(constraintViolations);
      }),
      validateUpdate: mark('beans', ValidatorFactory).on(function(validationFactory, entity) {
        var constraintViolations;
        constraintViolations = validationFactory.validator.validate(entity, Update);
        return _message(constraintViolations);
      }),
      validateRemove: mark('beans', ValidatorFactory).on(function(validationFactory, clz, id) {
        var constraintViolations, entity, manager;
        manager = createManager(clz);
        entity = manager.find(id);
        constraintViolations = validationFactory.validator.validate(entity, Remove);
        return _message(constraintViolations);
      }),
      validateBatchRemove: mark('beans', ValidatorFactory).on(function(validationFactory, clz, ids) {
        var id, result, results, _i, _len;
        results = [];
        for (_i = 0, _len = ids.length; _i < _len; _i++) {
          id = ids[_i];
          result = validator.validateRemove(clz, id);
          if (result.errors) {
            results.push(result.errors);
          }
        }
        if (results.length > 0) {
          return {
            errors: results
          };
        } else {
          return {};
        }
      })
    };
    return validator;
  };

}).call(this);
