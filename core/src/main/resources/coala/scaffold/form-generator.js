// Generated by CoffeeScript 1.3.3

/*
tabs: [
    {title: 'tab title', groups: ['DEFAULT', 'Group1']}
]
groups:
    DEFAULT:
        label: null
        columns: 1
    groupName: 'Group Label'
fields: [
    'username'
    name: 'username', label: 'Username', colspan: 1, rowspan: 1, group: 'groupName', type: 'date|number|string|file|picker', pickerSource: 'string|key-value-pair'
]
*/


(function() {
  var Add, Edit, coala, createValidator, defineFieldType, generateField, generateForm, objects, type, _ref, _ref1;

  _ref = require('coala/util'), type = _ref.type, objects = _ref.objects;

  coala = require('coala/config').coala;

  createValidator = require('coala/validator').createValidator;

  _ref1 = com.zyeeda.framework.validator.group, Add = _ref1.Add, Edit = _ref1.Edit;

  exports.generateForms = function(meta, labels, forms, formName) {
    var defaults, form;
    if (labels == null) {
      labels = {};
    }
    if (!forms) {
      return null;
    }
    defaults = forms.defaults || {};
    form = forms[formName] || defaults;
    return generateForm(form, meta, labels, formName);
  };

  generateForm = function(form, meta, labels, formName) {
    var field, groups, name, result, validateGroup, value, _i, _len, _ref2, _ref3;
    groups = {
      DEFAULT: {
        label: null,
        columns: 1
      }
    };
    _ref2 = form.groups || {};
    for (name in _ref2) {
      value = _ref2[name];
      if (value === null || type(value) === 'string') {
        groups[name] = {
          label: value,
          columns: 1
        };
      } else {
        groups[name] = value;
      }
    }
    result = {};
    result.groups = groups;
    result.fields = [];
    print('meta', meta.type);
    if (meta.type === 'tree' || meta.type === 'treeTable') {
      result.fields.push({
        label: '父节点',
        name: 'parentName',
        value: 'parent.name',
        colspan: 2,
        rowspan: 1,
        group: 'DEFAULT',
        type: 'string',
        readOnly: true
      });
      result.fields.push({
        name: 'parent',
        value: 'parent.id',
        colspan: 1,
        rowspan: 1,
        group: 'DEFAULT',
        type: 'hidden'
      });
    }
    _ref3 = form.fields;
    for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
      field = _ref3[_i];
      result.fields.push(generateField(field, meta, labels));
    }
    result.tabs = form.tabs;
    validateGroup = formName === 'add' ? Add : Edit;
    result.validator = createValidator().buildValidateRules(result.fields, meta.entityClass, validateGroup);
    return result;
  };

  generateField = function(config, meta, labels) {
    var defaults, field;
    field = config;
    if (type(field) === 'string') {
      field = {
        name: config
      };
    }
    defaults = {
      label: labels[field.name],
      colspan: 1,
      rowspan: 1,
      group: 'DEFAULT'
    };
    field = objects.extend(defaults, field);
    defineFieldType(field, meta.getField(field.name), meta);
    return field;
  };

  defineFieldType = function(field, fieldMeta, entityMeta) {
    if (field.type === 'many-picker') {
      if (fieldMeta.isManyToManyTarget() || fieldMeta.isOneToMany()) {
        field.pickerSource = fieldMeta.getPath();
        return;
      }
    }
    if (field.type) {
      return;
    }
    if (fieldMeta.getType() === java.lang.Boolean) {
      field.type = 'picker';
      field.pickerSource = coala.booleanFieldPickerSource;
      return;
    }
    if (fieldMeta.getType() === java.util.Date) {
      field.type = 'date';
      return;
    }
    if (fieldMeta.isEntity()) {
      field.type = 'picker';
      field.pickerSource = fieldMeta.getPath();
      return;
    }
    return field.type = 'string';
  };

}).call(this);
