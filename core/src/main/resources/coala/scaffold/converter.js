// Generated by CoffeeScript 1.3.3
(function() {
  var ArrayList, Calendar, ClassUtils, Date, HashSet, SimpleDateFormat, coala, createService, defaultConverter, handleArray, innerConverters, objects, parseDate, type, _ref, _ref1;

  SimpleDateFormat = java.text.SimpleDateFormat;

  _ref = java.util, Calendar = _ref.Calendar, Date = _ref.Date, ArrayList = _ref.ArrayList, HashSet = _ref.HashSet;

  ClassUtils = org.springframework.util.ClassUtils;

  coala = require('coala/config').coala;

  _ref1 = require('coala/util'), objects = _ref1.objects, type = _ref1.type;

  createService = require('coala/service').createService;

  parseDate = function(pattern, desiredType, stringDate) {
    var date, format;
    format = new SimpleDateFormat(pattern);
    date = format.parse(stringDate);
    if (desiredType === Calendar) {
      return format.getCalendar();
    } else {
      return date;
    }
  };

  innerConverters = {
    'java.util.Date': function(value, fieldMeta) {
      return parseDate.apply(null, [coala.dateFormat, Date, value]);
    },
    'java.util.Calendar': function(value, fieldMeta) {
      return parseDate.apply(null, [coala.dateFormat, Calendar, value]);
    }
  };

  handleArray = function(service, fieldType, targetType, value) {
    var id, list, manager, _i, _len;
    value = type(value) === 'string' ? [value] : value;
    list = ClassUtils.isAssignable(fieldType, ArrayList) ? new ArrayList() : new HashSet();
    manager = service.createManager(targetType);
    for (_i = 0, _len = value.length; _i < _len; _i++) {
      id = value[_i];
      list.add(manager.find(id));
    }
    return list;
  };

  defaultConverter = function(value, fieldMeta) {
    var c, manager, service;
    service = createService();
    if (fieldMeta.isEntity()) {
      manager = service.createManager(fieldMeta.type);
      return manager.find(value);
    } else if (fieldMeta.isManyToManyOwner()) {
      return handleArray(service, fieldMeta.type, fieldMeta.manyToManyTargetType, value);
    } else if (fieldMeta.isManyToManyTarget()) {
      return handleArray(service, fieldMeta.type, fieldMeta.manyToManyOwnerType, value);
    } else if (fieldMeta.isOneToMany()) {
      return handleArray(service, fieldMeta.type, fieldMeta.manyType, value);
    } else {
      if (fieldMeta.type === java.lang.String) {
        return value;
      }
      c = fieldMeta.type.getConstructor(java.lang.String);
      return c.newInstance(value);
    }
  };

  exports.createConverter = function(converters) {
    if (converters == null) {
      converters = {};
    }
    return {
      _inner: objects.extend({}, innerConverters, converters),
      convert: function(value, fieldMeta) {
        var converter;
        converter = this._inner[fieldMeta.name] ? this._inner[fieldMeta.name] : this._inner[fieldMeta.type.getName()];
        converter = converter || defaultConverter;
        return converter.call(null, value, fieldMeta);
      }
    };
  };

}).call(this);
