// Generated by CoffeeScript 1.3.3
(function() {
  var Add, Context, Edit, coala, createRouter, createValidator, entityMetaResolver, generateForms, json, log, meta, metas, mountExtraRoutes, router, validator, _fn, _i, _len, _ref,
    __slice = [].slice;

  Context = com.zyeeda.framework.web.SpringAwareJsgiServlet.Context;

  createRouter = require('coala/router').createRouter;

  coala = require('coala/config').coala;

  json = require('coala/response').json;

  generateForms = require('coala/scaffold/form-generator').generateForms;

  createValidator = require('coala/validator').createValidator;

  _ref = com.zyeeda.framework.validator.group, Add = _ref.Add, Edit = _ref.Edit;

  validator = new createValidator();

  log = require('ringo/logging').getLogger(module.id);

  entityMetaResolver = Context.getInstance(module).getBeanByClass(com.zyeeda.framework.web.scaffold.EntityMetaResolver);

  router = exports.router = createRouter();

  metas = entityMetaResolver.resolveScaffoldEntities(coala.entityPackages);

  mountExtraRoutes = function(router, meta, options) {
    router.get('configuration/forms/:formName', function(request, formName) {
      return json(generateForms(meta, options.labels, options.forms, formName));
    });
    router.get('configuration/operators', function(request) {
      var operators;
      operators = options['operators'] || coala.defaultOperators;
      return json(operators);
    });
    router.get('configuration/grid', function(request) {
      var colModel, grid, name, value, _ref1;
      grid = options['grid'];
      if (!grid && options.labels) {
        colModel = [];
        _ref1 = options.labels;
        for (name in _ref1) {
          value = _ref1[name];
          colModel.push({
            name: name,
            index: name,
            label: value
          });
        }
        grid = {
          colModel: colModel
        };
      }
      return json(grid);
    });
    router.get('configuration/picker', function(request) {
      var colModel, name, picker, value, _ref1;
      picker = options['picker'];
      if (!picker && options.labels) {
        colModel = [];
        _ref1 = options.labels;
        for (name in _ref1) {
          value = _ref1[name];
          colModel.push({
            name: name,
            index: name,
            label: value
          });
        }
        picker = {
          grid: {
            colModel: colModel
          }
        };
      }
      return json(picker);
    });
    router.get('configuration/:name', function(request, name) {
      return json(options[name]);
    });
    return router.get('configuration/rules', function(request) {
      var add, defaults, edit;
      if (!options.forms) {
        return null;
      }
      defaults = options.forms.defaults || {};
      add = options.forms.add || defaults;
      edit = options.forms.edit || defaults;
      return json({
        add: validator.buildValidateRules(add.fields, meta.entityClass, Add),
        edit: validator.buildValidateRules(edit.fields, meta.entityClass, Edit)
      });
    });
  };

  _fn = function(meta, mountExtraRoutes) {
    var doWithRouter, name, options, path, paths, _j, _ref1;
    path = meta.path;
    path = path.replace(/(^\/)|(\/$)/g, '');
    _ref1 = path.split('/'), paths = 2 <= _ref1.length ? __slice.call(_ref1, 0, _j = _ref1.length - 1) : (_j = 0, []), name = _ref1[_j++];
    paths.push(coala.scaffoldFolderName);
    paths.push(name);
    path = paths.join('/');
    options = (function() {
      try {
        return require(path);
      } catch (e) {
        return {};
      }
    })();
    log.debug("find scaffolding entity:" + meta.entityClass + " bind to " + meta.path + ", with options:" + (JSON.stringify(options)));
    doWithRouter = options.doWithRouter || function() {};
    options.doWithRouter = function(router) {
      doWithRouter(router);
      return mountExtraRoutes(router, meta, options);
    };
    return router.attachDomain(meta.path, meta.entityClass, options);
  };
  for (_i = 0, _len = metas.length; _i < _len; _i++) {
    meta = metas[_i];
    _fn(meta, mountExtraRoutes);
  }

}).call(this);
