// Generated by CoffeeScript 1.3.3
(function() {
  var Context, DefaultTransactionDefinition, TransactionCallback, TransactionTemplate, createTransactionDefinition, defaults, objects, type, _ref, _ref1;

  _ref = org.springframework.transaction.support, TransactionTemplate = _ref.TransactionTemplate, DefaultTransactionDefinition = _ref.DefaultTransactionDefinition, TransactionCallback = _ref.TransactionCallback;

  _ref1 = require('coala/util'), objects = _ref1.objects, type = _ref1.type;

  Context = com.zyeeda.framework.web.SpringAwareJsgiServlet.Context;

  /*
  see org.springframework.transaction.TransactionDefinition
  PROPAGATION_REQUIRED = 0;
  PROPAGATION_SUPPORTS = 1;
  PROPAGATION_MANDATORY = 2;
  PROPAGATION_REQUIRES_NEW = 3;
  PROPAGATION_NOT_SUPPORTED = 4;
  PROPAGATION_NEVER = 5;
  PROPAGATION_NESTED = 6;
  
  ISOLATION_DEFAULT = -1;
  ISOLATION_READ_UNCOMMITTED = 1;
  ISOLATION_READ_COMMITTED = 2;
  ISOLATION_REPEATABLE_READ = 4;
  ISOLATION_SERIALIZABLE = 8;
  */


  defaults = {
    readOnly: false,
    name: 'transaction thread',
    propagationBehavior: 0,
    isolationLevel: -1,
    timeout: -1
  };

  createTransactionDefinition = function(option) {
    var c, definition, name, value;
    if (option == null) {
      option = {};
    }
    definition = new DefaultTransactionDefinition();
    c = objects.extend(defaults, option);
    for (name in c) {
      value = c[name];
      definition[name] = value;
    }
    return definition;
  };

  exports.tx = function(callback) {
    var cb, context, definition, key, template, tm;
    context = Context.getInstance(module);
    cb = type(callback) === 'object' ? callback : {};
    if (type(callback) === 'object') {
      callback = callback['callback'];
    }
    if (type(callback) !== 'function') {
      throw new Error('no callback function supplied');
    }
    for (key in cb) {
      if (!(key in defaults)) {
        delete cb[key];
      }
    }
    tm = context.getBean('transactionManager');
    definition = createTransactionDefinition(cb);
    template = new TransactionTemplate(tm, definition);
    return template.execute(new TransactionCallback({
      doInTransaction: function(status) {
        return callback(status);
      }
    }));
  };

}).call(this);
