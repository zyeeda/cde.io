// Generated by CoffeeScript 1.3.3
(function() {
  var Configuration, Context, EntityManager, EntityManagerFactory, EntityManagerFactoryUtils, coala, context, createQuery, createUtil, entityMetaResolver, fillPageInfo, firstIfOnlyOne, fs, getEntityManager, getPageInfo, loadOrms, modified, modifyRecord, namedQueries, objects, type, _ref, _ref1,
    __slice = [].slice;

  Context = com.zyeeda.framework.web.SpringAwareJsgiServlet.Context;

  _ref = javax.persistence, EntityManager = _ref.EntityManager, EntityManagerFactory = _ref.EntityManagerFactory;

  EntityManagerFactoryUtils = org.springframework.orm.jpa.EntityManagerFactoryUtils;

  Configuration = org.hibernate.cfg.Configuration;

  coala = require('coala/config').coala;

  _ref1 = require('coala/util'), type = _ref1.type, objects = _ref1.objects;

  createUtil = require('coala/manager-util').createUtil;

  entityMetaResolver = Context.getInstance(module).getBeanByClass(com.zyeeda.framework.web.scaffold.EntityMetaResolver);

  context = Context.getInstance(module);

  getEntityManager = function(name) {
    var em, emf;
    if (name == null) {
      name = false;
    }
    emf = name ? context.getBean(name) : context.getBeanByClass(EntityManagerFactory);
    em = EntityManagerFactoryUtils.doGetTransactionalEntityManager(emf, null);
    if (em == null) {
      throw new Error('can not find an EntityManager in current thread');
    }
    return em;
  };

  exports.createManager = function(entityClass, name) {
    var em;
    em = getEntityManager(name);
    return {
      mixin: function(mixins) {
        var value;
        for (name in mixins) {
          value = mixins[name];
          if (type(value) === 'function') {
            this[name] = value.bind(this, em);
          }
        }
        return this;
      },
      find: function() {
        var id, ids, result;
        ids = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        result = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = ids.length; _i < _len; _i++) {
            id = ids[_i];
            if (id == null) {
              throw new Error('id can not be null');
            }
            _results.push(em.find(entityClass, id));
          }
          return _results;
        })();
        return firstIfOnlyOne(result);
      },
      getReference: function() {
        var id, ids, result;
        ids = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        result = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = ids.length; _i < _len; _i++) {
            id = ids[_i];
            if (id == null) {
              throw new Error('id can not be null');
            }
            _results.push(em.getReference(entityClass, id));
          }
          return _results;
        })();
        return firstIfOnlyOne(result);
      },
      merge: function() {
        var entities, entity, result;
        entities = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        result = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = entities.length; _i < _len; _i++) {
            entity = entities[_i];
            if (entity == null) {
              throw new Error('entity can not be null');
            }
            _results.push(em.merge(entity));
          }
          return _results;
        })();
        return firstIfOnlyOne(result);
      },
      save: function() {
        var entities, entity, result;
        entities = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        result = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = entities.length; _i < _len; _i++) {
            entity = entities[_i];
            if (entity == null) {
              throw new Error('entity can not be null');
            }
            em.persist(entity);
            _results.push(entity);
          }
          return _results;
        })();
        return firstIfOnlyOne(result);
      },
      remove: function() {
        var entities, entity, result;
        entities = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        result = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = entities.length; _i < _len; _i++) {
            entity = entities[_i];
            if (entity == null) {
              throw new Error('entity can not be null');
            }
            em.remove(entity);
            _results.push(entity);
          }
          return _results;
        })();
        return firstIfOnlyOne(result);
      },
      removeById: function() {
        var entities, id, ids;
        ids = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        entities = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = ids.length; _i < _len; _i++) {
            id = ids[_i];
            _results.push(this.find(id));
          }
          return _results;
        }).call(this);
        return this.remove.apply(this, entities);
      },
      contains: function(entity) {
        return em.contains(entity);
      },
      flush: function() {
        return em.flush();
      },
      refresh: function() {
        var entities, entity, result;
        entities = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        result = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = entities.length; _i < _len; _i++) {
            entity = entities[_i];
            if (entity == null) {
              throw new Error('entity can not be null');
            }
            _results.push(em.refresh(entity));
          }
          return _results;
        })();
        return firstIfOnlyOne(result);
      },
      createNamedQuery: function(name) {
        return createQuery(em, name);
      },
      getAll: function(option) {
        var builder, order, orders, pageInfo, property, q, query, root, value;
        if (option == null) {
          option = {};
        }
        builder = em.getCriteriaBuilder();
        query = builder.createQuery(entityClass);
        root = query.from(entityClass);
        if (option.orderBy) {
          orders = (function() {
            var _i, _len, _ref2, _results;
            _ref2 = option.orderBy;
            _results = [];
            for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
              order = _ref2[_i];
              _results.push((function() {
                var _results1;
                _results1 = [];
                for (property in order) {
                  value = order[property];
                  _results1.push(builder[value](root.get(property)));
                }
                return _results1;
              })());
            }
            return _results;
          })();
          query.orderBy(orders);
        }
        q = em.createQuery(query);
        pageInfo = getPageInfo(option);
        fillPageInfo(q, pageInfo);
        return q.getResultList();
      },
      findByExample: function(example, option) {
        var dsFiles, dsPath, managerUtil, meta, path, paths, _i, _ref2;
        if (option == null) {
          option = {};
        }
        managerUtil = new createUtil(em, entityClass);
        meta = entityMetaResolver.resolveEntity(entityClass);
        path = meta.path;
        path = path.replace(/(^\/)|(\/$)/g, '');
        _ref2 = path.split('/'), paths = 2 <= _ref2.length ? __slice.call(_ref2, 0, _i = _ref2.length - 1) : (_i = 0, []), name = _ref2[_i++];
        paths.push(coala.scaffoldFolderName);
        paths.push(name);
        path = paths.join('/');
        dsPath = coala.appPath + path;
        dsFiles = ['.ds.hql', '.ds.sql', '.ds.sp', '.ds.js'];
        if (fs.exists(dsPath + dsFiles[0])) {
          return managerUtil.findByHql(example, option, dsPath + dsFiles[0]);
        } else if (fs.exists(dsPath + dsFiles[1])) {
          return managerUtil.findBySql(example, option, dsPath + dsFiles[1]);
        } else if (fs.exists(dsPath + dsFiles[2])) {
          return managerUtil.findByProcedure(example, option, dsPath + dsFiles[2]);
        } else if (fs.exists(dsPath + dsFiles[3])) {
          return managerUtil.findByMethod(example, option, path + dsFiles[3]);
        } else {
          return managerUtil.findByEntity(example, option);
        }
      },
      __noSuchMethod__: function(name, args) {
        var option, pageInfo, paramName, query, singleResult, value;
        if ((args != null ? args.length : void 0) > 1) {
          throw new Error('can only support one argument call');
        }
        option = args[0];
        pageInfo = getPageInfo(option);
        query = createQuery(em, name, option);
        fillPageInfo(query, pageInfo);
        singleResult = 'singleResult' in option && option.singleResult;
        if (singleResult) {
          delete option['singleResult'];
        }
        for (paramName in option) {
          value = option[paramName];
          if (paramName !== 'firstResult' && paramName !== 'maxResults') {
            query.setParameter(paramName, value);
          }
        }
        if (name.substring(0, 4) === 'find') {
          if (singleResult) {
            return query.getSingleResult();
          } else {
            return query.getResultList();
          }
        } else {
          return query.executeUpdate();
        }
      }
    };
  };

  getPageInfo = function(object) {
    var name, pageable, result;
    result = {
      firstResult: 0,
      maxResults: 0
    };
    pageable = (object != null ? object.hasOwnProperty('firstResult') : void 0) && object.hasOwnProperty('maxResults');
    if (!pageable) {
      return null;
    }
    for (name in result) {
      result[name] = object[name];
    }
    return result;
  };

  fillPageInfo = function(query, pageInfo) {
    if (pageInfo != null) {
      query.setFirstResult(pageInfo.firstResult);
      query.setMaxResults(pageInfo.maxResults);
      return true;
    }
    return false;
  };

  if (coala.development === true) {
    fs = require('fs');
    Configuration = org.hibernate.cfg.Configuration;
    namedQueries = {};
    modifyRecord = [];
    modified = function() {
      var modifiyRecord, name, result, times;
      times = ((function() {
        var _i, _len, _ref2, _results;
        _ref2 = coala.orms;
        _results = [];
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          name = _ref2[_i];
          _results.push(fs.lastModified(name));
        }
        return _results;
      })()).map(function(date) {
        return date.getTime();
      });
      if (times.length !== modifyRecord.length) {
        modifiyRecord = times;
        return true;
      } else {
        result = modifyRecord.every(function(value, i) {
          return value === times[i];
        });
        modifyRecord = times;
        return !result;
      }
    };
    loadOrms = function() {
      var config, file, i, name, queries, _i, _len, _ref2;
      config = new Configuration();
      _ref2 = coala.orms;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        file = _ref2[_i];
        config.addFile(file);
      }
      config.buildMappings();
      queries = config.getNamedQueries();
      namedQueries = {};
      i = queries.keySet().iterator();
      while (i.hasNext()) {
        name = i.next();
        namedQueries[name] = queries.get(name).getQuery();
      }
      return namedQueries;
    };
    createQuery = function(em, name, option) {
      var query;
      if (modified()) {
        loadOrms();
      }
      query = namedQueries[name];
      if (query == null) {
        throw new Error("no query with name:" + name);
      }
      return em.createQuery(query);
    };
  } else {
    createQuery = function(em, name, option) {
      return em.createNamedQuery(name);
    };
  }

  firstIfOnlyOne = function(array) {
    if (array.length === 1) {
      return array[0];
    } else {
      return array;
    }
  };

}).call(this);
