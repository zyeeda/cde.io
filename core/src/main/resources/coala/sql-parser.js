// Generated by CoffeeScript 1.3.3
(function() {

  exports.SqlParser = function() {
    var parser;
    parser = {
      replaceSpace: function(sql) {
        return sql.replace(/\s{2,}|\t|\r|\n/g, ' ');
      },
      trim: function(sql) {
        return sql.replace(/(^\s*)|(\s*$)/g, '');
      },
      getSelectItems: function(sql) {
        var c, col, cols, regex, results, tempCol, _i, _len;
        String.prototype.trim = function() {
          return this.replace(/(^\s*)|(\s*$)/g, '');
        };
        regex = /(select)(.+)(from)/i;
        col = regex.exec(sql);
        if (!col) {
          throw new Error('it\'s not a sql statement');
        }
        cols = col[2].trim().split(',');
        results = [];
        for (_i = 0, _len = cols.length; _i < _len; _i++) {
          c = cols[_i];
          tempCol = c.trim();
          if (tempCol.indexOf('as') !== -1) {
            results.push(tempCol.split("as")[1].trim());
          } else if (tempCol.indexOf(' ') !== -1) {
            results.push(tempCol.substring(tempCol.lastIndexOf(' ') + 1, tempCol.length));
          } else {
            if (tempCol.indexOf('.') !== -1) {
              results.push(tempCol.split('.')[1]);
            } else {
              results.push(tempCol);
            }
          }
        }
        return results;
      },
      subCond: function(sql, nameParam) {
        var a, b, c, d, e;
        a = sql.split(' ' + nameParam);
        b = a[0];
        c = b.substr(0, b.lastIndexOf(' ', b.lastIndexOf(' ') - 1));
        d = c.substr(0, c.lastIndexOf(' '));
        e = c.substr(c.lastIndexOf(' ') + 1, c.length);
        if (e === 'where') {
          d = d + ' where 0 = 0';
        }
        sql = d + a[1];
        print(sql);
        return sql;
      },
      findBySql: function(example, option, sqlPath) {
        var f, fileds, i, isNullParams, it, list, obj, pageInfo, params, query, results, sql, tempSql, _i, _len, _next;
        if (option == null) {
          option = {};
        }
        parser = new SqlParser;
        sql = fs.read(sqlPath);
        sql = parser.replaceSpace(sql);
        query = em.createNativeQuery(sql);
        params = query.parameters;
        it = params.iterator();
        isNullParams = false;
        while (it.hasNext()) {
          _next = it.next();
          if (example[_next.name] != null) {
            tempSql = sql.substr(0, sql.indexOf(':' + _next.name)).replace(/(^\s*)|(\s*$)/g, '');
            if ('like' === tempSql.substr(tempSql.length - 4, tempSql.length)) {
              query.setParameter(_next.name, '%' + example[_next.name] + '%');
            } else {
              query.setParameter(_next.name, example[_next.name]);
            }
          } else {
            isNullParams = true;
            sql = parser.subCond(sql, ':' + _next.name);
          }
        }
        if (isNullParams) {
          query = em.createNativeQuery(sql);
          params = query.parameters;
          it = params.iterator();
          while (it.hasNext()) {
            _next = it.next();
            tempSql = sql.substr(0, sql.indexOf(':' + _next.name)).replace(/(^\s*)|(\s*$)/g, '');
            if ('like' === tempSql.substr(tempSql.length - 4, tempSql.length)) {
              query.setParameter(_next.name, '%' + example[_next.name] + '%');
            } else {
              query.setParameter(_next.name, example[_next.name]);
            }
          }
        }
        if (option.fetchCount === true) {
          return query.resultList.size();
        } else {
          pageInfo = getPageInfo(option);
          fillPageInfo(query, pageInfo);
          fileds = parser.getSelectItems(sql);
          list = query.resultList;
          results = [];
          it = list.iterator();
          while (it.hasNext()) {
            _next = it.next();
            i = 0;
            obj = {};
            for (_i = 0, _len = fileds.length; _i < _len; _i++) {
              f = fileds[_i];
              obj[f] = _next[i];
              i++;
            }
            results.push(obj);
          }
          return results;
        }
      }
    };
    return parser;
  };

}).call(this);
