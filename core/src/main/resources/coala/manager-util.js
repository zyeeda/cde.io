// Generated by CoffeeScript 1.3.3
(function() {
  var ArrayList, Boolean, Class, Date, DatetimeUtils, Double, Example, Integer, MatchMode, Order, Projections, Restrictions, String, fs, _ref, _ref1, _ref2;

  _ref = java.lang, Class = _ref.Class, Boolean = _ref.Boolean, String = _ref.String, Integer = _ref.Integer, Double = _ref.Double;

  _ref1 = java.util, ArrayList = _ref1.ArrayList, Date = _ref1.Date;

  _ref2 = org.hibernate.criterion, Example = _ref2.Example, Order = _ref2.Order, Projections = _ref2.Projections, MatchMode = _ref2.MatchMode, Restrictions = _ref2.Restrictions;

  DatetimeUtils = com.zyeeda.framework.utils.DatetimeUtils;

  fs = fs || require('fs');

  exports.createUtil = function(em, entityClass) {
    var util;
    util = {
      findByEntity: function(example, option) {
        var criteria, order, pageInfo, property, value, _i, _len, _ref3;
        if (option == null) {
          option = {};
        }
        criteria = em.getDelegate().createCriteria(entityClass);
        if (option.restricts) {
          criteria = util.fillRestrict(criteria, option.restricts, entityClass);
        }
        if (option.fetchCount === true) {
          criteria.setProjection(Projections.rowCount());
          return criteria.list().get(0);
        } else {
          pageInfo = util.getPageInfo(option);
          util.fillPageInfo(criteria, pageInfo);
          if (option.orderBy) {
            _ref3 = option.orderBy;
            for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
              order = _ref3[_i];
              for (property in order) {
                value = order[property];
                criteria.addOrder(Order[value](property));
              }
            }
          }
          return criteria.list();
        }
      },
      findBySql: function(example, option, sqlPath) {
        if (option == null) {
          option = {};
        }
        return util.findByStatement(example, option, sqlPath, 'sql');
      },
      findByHql: function(example, option, hqlPath) {
        if (option == null) {
          option = {};
        }
        return util.findByStatement(example, option, hqlPath, 'hql');
      },
      findByMethod: function(example, option, jsPath) {
        var recordCount, results;
        if (option == null) {
          option = {};
        }
        if (option.fetchCount === true) {
          recordCount = require(jsPath).recordCount;
          return recordCount.call(recordCount, example, option);
        } else {
          results = require(jsPath).results;
          return results.call(results, example, option);
        }
      },
      findByProcedure: function(example, option, sqlPath) {
        var f, i, it, list, obj, pageInfo, query, restrict, results, sql, _i, _j, _len, _len1, _next, _ref3, _type, _value;
        if (option == null) {
          option = {};
        }
        sql = fs.read(path);
        sql = sql.replace(/\s{2,}|\t|\r|\n/g, ' ');
        query = em.createNativeQuery(sql);
        for (i = _i = 0, _len = restricts.length; _i < _len; i = ++_i) {
          restrict = restricts[i];
          if (restrict.type) {
            _type = restrict.type.toUpperCase();
          } else {
            _type = '';
          }
          if ('DATE' === _type) {
            _value = DatetimeUtils.parseDate(restrict.value);
          } else if ('TIME' === _type) {
            _value = DatetimeUtils.parseDatetime(restrict.value);
          } else if ('BOOLEAN' === _type) {
            _value = new Boolean(restrict.value === '1' ? true : false);
          } else {
            _value = restrict.value;
          }
          query.setParameter(i + 1, _value);
        }
        _len = restricts.length;
        pageInfo = util.getPageInfo(option);
        query.setParameter(_len + 1, option.fetchCount);
        query.setParameter(_len + 2, pageInfo.firstResult);
        query.setParameter(_len + 3, pageInfo.maxResults);
        list = query.resultList;
        if (option.fetchCount === true) {
          return list.size();
        }
        results = [];
        it = list.iterator();
        while (it.hasNext()) {
          _next = it.next();
          obj = {};
          _ref3 = option.configs.fields;
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            f = _ref3[_j];
            obj[f.name] = _next[f.position];
          }
          results.push(obj);
        }
        return results;
      },
      findByStatement: function(example, option, path, type) {
        var f, fields, it, list, obj, order, orderBy, pageInfo, params, property, query, restrict, restricts, result, results, sql, value, where, _i, _j, _k, _l, _len, _len1, _len2, _len3, _next, _ref3, _type, _value;
        if (option == null) {
          option = {};
        }
        sql = '';
        if (option.fetchCount === true) {
          sql = fs.read(path + '.count');
        } else {
          sql = fs.read(path);
        }
        sql = sql.replace(/\s{2,}|\t|\r|\n/g, ' ');
        fields = option.configs.fields;
        orderBy = '';
        result = util.joinWhere(fields, option.restricts);
        where = result.where;
        restricts = result.restricts;
        if (where) {
          sql = sql.replace('{{where}}', 'where' + where);
        } else {
          sql = sql.replace('{{where}}', 'where 0 = 0');
        }
        if (option.orderBy) {
          _ref3 = option.orderBy;
          for (_i = 0, _len = _ref3.length; _i < _len; _i++) {
            order = _ref3[_i];
            for (property in order) {
              value = order[property];
              for (_j = 0, _len1 = fields.length; _j < _len1; _j++) {
                f = fields[_j];
                if (f.name === property) {
                  orderBy += ' ' + f.alias + ' ' + value + ',';
                }
              }
            }
          }
        }
        orderBy = orderBy.substr(0, orderBy.length - 1);
        if (orderBy) {
          sql = sql.replace('{{orderBy}}', 'order by' + orderBy);
        } else {
          sql = sql.replace('{{orderBy}}', '');
        }
        if (type === 'sql') {
          query = em.createNativeQuery(sql);
        } else {
          if ((option.configs.resultClass != null) && !option.fetchCount) {
            query = em.createQuery(sql, Class.forName(option.configs.resultClass));
          } else {
            query = em.createQuery(sql);
          }
        }
        params = query.parameters;
        it = params.iterator();
        while (it.hasNext()) {
          _next = it.next();
          for (_k = 0, _len2 = restricts.length; _k < _len2; _k++) {
            restrict = restricts[_k];
            if (_next.name === restrict.name) {
              if (restrict.type) {
                _type = restrict.type.toUpperCase();
              } else {
                _type = '';
              }
              if ('DATE' === _type) {
                _value = DatetimeUtils.parseDate(restrict.value);
              } else if ('TIME' === _type) {
                _value = DatetimeUtils.parseDatetime(restrict.value);
              } else if ('BOOLEAN' === _type) {
                _value = new Boolean(restrict.value === '1' ? true : false);
              } else {
                _value = restrict.value;
              }
              query.setParameter(_next.name, _value);
            }
          }
        }
        if (option.fetchCount === true) {
          return query.resultList.get(0);
        } else {
          pageInfo = util.getPageInfo(option);
          util.fillPageInfo(query, pageInfo);
          list = query.resultList;
          if (option.configs.resultClass) {
            return list;
          }
          results = [];
          it = list.iterator();
          while (it.hasNext()) {
            _next = it.next();
            obj = {};
            for (_l = 0, _len3 = fields.length; _l < _len3; _l++) {
              f = fields[_l];
              obj[f.name] = _next[f.position];
            }
            results.push(obj);
          }
          return results;
        }
      },
      joinWhere: function(fields, restricts) {
        var f, i, inStr, newRestrict, operators, r, restrict, where, _i, _j, _k, _len, _len1, _len2, _operator, _restrict, _restricts, _value;
        if (!restricts) {
          return {
            where: where,
            restricts: restricts
          };
        }
        operators = {
          'EQ': '=',
          'NE': '<>',
          'GT': '>',
          'LT': '<',
          'GE': '>=',
          'LE': '<='
        };
        where = '';
        _restricts = [];
        for (_i = 0, _len = restricts.length; _i < _len; _i++) {
          restrict = restricts[_i];
          _restrict = {};
          for (_j = 0, _len1 = fields.length; _j < _len1; _j++) {
            f = fields[_j];
            if (f.name === restrict.name) {
              if (restrict.operator) {
                _operator = restrict.operator.toUpperCase();
              } else {
                _operator = 'LIKE';
              }
              _restrict = {
                name: restrict.name,
                operator: _operator
              };
              if (f.type) {
                _restrict.type = f.type;
              }
              if (_operator === 'LIKE') {
                where += ' ' + f.alias + ' like :' + f.name + ' and';
                _restrict.value = '%' + restrict.value + '%';
              } else if (_operator === 'BETWEEN') {
                _value = restrict.value.split(',');
                _restrict.value = _value[0];
                newRestrict = {
                  name: 'end_' + restrict.name,
                  value: _value[1]
                };
                if (f.type) {
                  newRestrict.type = f.type;
                }
                _restricts.push(newRestrict);
                where += ' ' + f.alias + ' between :' + f.name + ' and :' + 'end_' + f.name + ' and';
              } else if (_operator === 'IN') {
                _value = restrict.value.split(',');
                _restrict.value = _value.pop(0);
                inStr = ':' + f.name;
                for (i = _k = 0, _len2 = _value.length; _k < _len2; i = ++_k) {
                  r = _value[i];
                  newRestrict = {
                    name: 'in_' + i + '_' + restrict.name,
                    value: r
                  };
                  if (f.type) {
                    newRestrict.type = f.type;
                  }
                  _restricts.push(newRestrict);
                  inStr += ', :in_' + i + '_' + f.name;
                }
                where += ' ' + f.alias + ' in (' + inStr + ') and';
              } else {
                _restrict.value = restrict.value;
                where += ' ' + f.alias + ' ' + operators[_operator] + ' :' + f.name + ' and';
              }
              _restricts.push(_restrict);
            }
          }
        }
        where = where.substr(0, where.length - 4);
        return {
          where: where,
          restricts: _restricts
        };
      },
      fillRestrict: function(criteria, restrictions, entityClass) {
        var junc, restrict, _i, _len, _operator, _other, _pname, _tempVal, _type, _value;
        for (_i = 0, _len = restrictions.length; _i < _len; _i++) {
          restrict = restrictions[_i];
          _pname = restrict.name.charAt(0).toUpperCase() + restrict.name.substring(1);
          try {
            _type = entityClass.getMethod('get' + _pname).returnType;
          } catch (e) {
            try {
              _type = entityClass.getMethod('is' + _pname).returnType;
            } catch (ex) {
              throw new Error("property " + restrict.name + " is not found");
            }
          }
          _operator = restrict.operator;
          if (_type.equals(Date)) {
            _tempVal = restrict.value.split(',');
            _value = DatetimeUtils.parseDate(_tempVal[0]);
            if (_tempVal[1]) {
              _other = DatetimeUtils.parseDate(_tempVal[1]);
            } else {
              _other = _value;
            }
            _operator = _operator || 'between';
          } else if (_type.equals(Boolean) || _type.toString().equals('boolean')) {
            _value = new Boolean(restrict.value === '1' ? true : false);
            _operator = _operator || 'eq';
          } else if (_type.equals(Integer) || _type.equals(Double) || _type.toString().equals('int') || _type.toString().equals('double')) {
            _tempVal = restrict.value.split(',');
            _value = _tempVal[0];
            _other = _tempVal[1];
            _operator = _operator || 'between';
          } else {
            if (restrict.value) {
              _value = restrict.value;
            }
            if (restrict.other) {
              _other = restrict.other;
            }
            _operator = _operator || 'like';
          }
          if ('or' === _operator) {
            junc = Restrictions.disjunction();
            criteria = criteria.add(fillRestrict(junc, _value));
          } else if ('and' === _operator) {
            junc = Restrictions.conjunction();
            criteria = criteria.add(fillRestrict(junc, _value));
          } else if ('not' === _operator) {
            criteria = util.fillRestrict(criteria, _value);
          } else if ('in' === _operator) {
            _value = new String(restrict.value).split(',');
            criteria = criteria.add(Restrictions[_operator].call(Restrictions, restrict.name, _value));
          } else if ('like' === _operator || 'ilike' === _operator) {
            criteria = criteria.add(Restrictions[_operator].call(Restrictions, restrict.name, _value, MatchMode['ANYWHERE']));
          } else {
            if (_value && _other) {
              criteria = criteria.add(Restrictions[_operator].call(Restrictions, restrict.name, _value, _other));
            } else if (restrict.value) {
              criteria = criteria.add(Restrictions[_operator].call(Restrictions, restrict.name, _value));
            } else {
              criteria = criteria.add(Restrictions[_operator].call(Restrictions, restrict.name));
            }
          }
        }
        return criteria;
      },
      getPageInfo: function(object) {
        var name, pageable, result;
        result = {
          firstResult: 0,
          maxResults: 0
        };
        pageable = (object != null ? object.hasOwnProperty('firstResult') : void 0) && object.hasOwnProperty('maxResults');
        if (!pageable) {
          return null;
        }
        for (name in result) {
          result[name] = object[name];
        }
        return result;
      },
      fillPageInfo: function(query, pageInfo) {
        if (pageInfo != null) {
          query.setFirstResult(pageInfo.firstResult);
          query.setMaxResults(pageInfo.maxResults);
          return true;
        }
        return false;
      }
    };
    return util;
  };

}).call(this);
