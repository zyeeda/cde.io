// Generated by CoffeeScript 1.3.3

/*
 Value               Class      Type
-------------------------------------
"foo"               String     string
new String("foo")   String     object
1.2                 Number     number
new Number(1.2)     Number     object
true                Boolean    boolean
new Boolean(true)   Boolean    object
new Date()          Date       object
new Error()         Error      object
[1,2,3]             Array      object
new Array(1, 2, 3)  Array      object
new Function("")    Function   function
/abc/g              RegExp     object
new RegExp("meow")  RegExp     object
{}                  Object     object
new Object()        Object     object

type("")         # "string"
type(new String) # "string"
type([])         # "array"
type(/\d/)       # "regexp"
type(new Date)   # "date"
type(true)       # "boolean"
type(null)       # "null"
type({})         # "object"
*/


(function() {
  var classToType, name, _i, _len, _ref,
    __slice = [].slice;

  classToType = {};

  _ref = "Boolean Number String Function Array Date RegExp Undefined Null".split(" ");
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    name = _ref[_i];
    classToType["[object " + name + "]"] = name.toLowerCase();
  }

  exports.type = function(obj) {
    var strType;
    strType = Object.prototype.toString.call(obj);
    return classToType[strType] || "object";
  };

  exports.objects = {
    extend: function() {
      var key, mixin, mixins, target, value, _j, _len1;
      target = arguments[0], mixins = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (target == null) {
        target = {};
      }
      for (_j = 0, _len1 = mixins.length; _j < _len1; _j++) {
        mixin = mixins[_j];
        for (key in mixin) {
          value = mixin[key];
          target[key] = value;
        }
      }
      return target;
    }
  };

  exports.paths = {
    join: function() {
      var cleanStartAndEndSlash, p, paths, result, _j, _k, _len1;
      paths = 2 <= arguments.length ? __slice.call(arguments, 0, _j = arguments.length - 1) : (_j = 0, []), cleanStartAndEndSlash = arguments[_j++];
      if (exports.type(cleanStartAndEndSlash) === 'string') {
        paths.push(cleanStartAndEndSlash);
        cleanStartAndEndSlash = false;
      }
      result = '';
      for (_k = 0, _len1 = paths.length; _k < _len1; _k++) {
        p = paths[_k];
        result += '/' + p;
      }
      result = result.substring(1);
      result = result.replace(/(\/){2,3}/g, '/');
      if (cleanStartAndEndSlash) {
        result = result.replace(/(^\/)|(\/$)/g, '');
      }
      return result;
    }
  };

}).call(this);
